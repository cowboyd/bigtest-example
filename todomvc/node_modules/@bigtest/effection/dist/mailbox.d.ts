/// <reference types="node" />
import { Operation } from 'effection';
import { EventEmitter } from 'events';
export { any } from './pattern';
export interface SubscriptionMessage {
    event: string;
    args: unknown[];
}
export declare class Mailbox<T = any> {
    private subscriptions;
    private messages;
    static subscribe(emitter: EventEmitter | EventTarget, events: string | string[]): Operation<Mailbox<SubscriptionMessage>>;
    send(message: T): void;
    receive(pattern?: unknown): Operation<T>;
    pipe(other: Mailbox<T>): Generator<Operation<any>, void, unknown>;
    map<R>(fn: (from: T) => R): Operation<Mailbox<R>>;
}
export declare function subscribe(mailbox: Mailbox<SubscriptionMessage>, emitter: EventEmitter | EventTarget, events: string | string[]): Operation;
